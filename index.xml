<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rr</title>
    <link>https://taarr.com/</link>
    <description>Recent content on rr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://taarr.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://taarr.com/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/changelog/</guid>
      <description>0.17.0  Local invocation can now use interpreter that take in STDIN  Another interpreter besides a posix shell can&amp;rsquo;t take in arguments or use .files STDIN works with lua(LadyLua), lua(PUC), python, dash, bash, zsh   Overhaul Makefile Fix local tests  0.16.0  Better sudo with password handling Fix various spinner issues Changed spinner: line for copying and dots for runs Add spinner when checking SSH hostname Disable ssh compression Interpreter falls back to &amp;ldquo;sh&amp;rdquo; instead of $SHELL environment variable  0.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://taarr.com/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/examples/</guid>
      <description>&amp;gt;Table of Contents&amp;lt;  Tutorial Local invocation of scripts Run scripts inside a local container Run scripts remote via SSH Install podman to remote Ubuntu 20.04 host   Tutorial In the Git source tree, the TUTORIAL directory contains a hierarchy that persistently enables IP forwarding through sysctl upon the remote SSH host named avocado
First you have to setup SSH public-key authentication for a remote host with hostname avocado.</description>
    </item>
    
    <item>
      <title>Howto</title>
      <link>https://taarr.com/howto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/howto/</guid>
      <description> &amp;gt;Table of Contents&amp;lt;  Parallel Execution   Parallel Execution Shell scripts can execute rr natively.
#!/bin/sh # Run namespace:script in parallel rr somewhere namespace:script &amp;amp; rr another namespace:script &amp;amp; wait # Next step after above rr remotehost namespace:anotherscript </description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://taarr.com/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/reference/</guid>
      <description>&amp;gt;Table of Contents&amp;lt;  Why Multicall Modes  Console Silent Dump Sudo   Audit Trail Readmes Environment Variables Hierarchy Notes Decision Record   Why I built my own Lua-based configuration management software. A little more than thousand commits in, I realized the oneshot nature of shell scripts more convenient.
CFEngine, Puppet, Chef and others did not offer advantages over a combination of rerun/bashing + drist. Cons mostly outweight the pros.</description>
    </item>
    
  </channel>
</rss>
