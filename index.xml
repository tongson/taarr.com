<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rr</title>
    <link>https://taarr.com/</link>
    <description>Recent content on rr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://taarr.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://taarr.com/changelog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/changelog/</guid>
      <description>0.15.0  Change from sftp to tar for ssh copies Support ssh copying with sudo passwords Also replace rsync with tar for container runs  0.14.0  Custom ssh_config (rr.hosts) app=rr added to JSON log  0.13.0  security issue: omit environment variables from logged code  0.12.0  Support sudo invocations Interpreter can be set in shell file STDOUT and STDERR encoded to base64 in JSON log STDOUT and STDDER also logged as DEBUG entries even without errors Only take the first line from the task file A breaking change; exported environment variables must prefix rr__ Code of script logged along with DEBUG entries  0.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://taarr.com/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/examples/</guid>
      <description>&amp;gt; Table of Contents &amp;lt;  Tutorial Local invocation of scripts Run scripts inside a local container Run scripts remote via SSH   Tutorial In the Git source tree, the TUTORIAL directory contains a hierarchy that persistently enables IP forwarding through sysctl upon the remote SSH host named avocado
First you have to setup SSH public-key authentication for a remote host with hostname avocado. It&amp;rsquo;s important that the hostnames match.</description>
    </item>
    
    <item>
      <title>Howto</title>
      <link>https://taarr.com/howto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/howto/</guid>
      <description> &amp;gt; Table of Contents &amp;lt;  Parallel Execution   Parallel Execution Shell scripts can execute rr natively.
#!/bin/sh # Run namespace:script in parallel rr somewhere namespace:script &amp;amp; rr another namespace:script &amp;amp; wait # Next step after above rr remotehost namespace:anotherscript </description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://taarr.com/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://taarr.com/reference/</guid>
      <description>&amp;gt; Table of Contents &amp;lt;  Why Multicall Modes  Console Silent Dump Sudo   Audit Trail Readmes Environment Variables Hierarchy Notes Decision Record   Why I built my own Lua-based configuration management software. A little more than thousand commits in, I realized the oneshot nature of shell scripts more convenient.
CFEngine, Puppet, Chef and others did not offer advantages over a combination of rerun/bashing + drist. Cons mostly outweight the pros.</description>
    </item>
    
  </channel>
</rss>
